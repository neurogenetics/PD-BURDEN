#!/bin/env python

# Meta-analyses script for burdens
    # Sept 2021 
    # Start script like this:
    # Takes in .assoc files generated by RVTests

# Import the necessary packages
import numpy as np
import pandas as pd
import math
import sys
import joblib
import subprocess
import statsmodels.api as sm
from scipy import stats
from functools import reduce
import argparse
import os

# Initialize parser and add arguments
    # Takes 3 arguments: UKB cases, UKB proxies, and WGS data
parser = argparse.ArgumentParser()
parser.add_argument("--ukb_cases", help="Input file name (with suffix) for UKB cases .assoc")
parser.add_argument("--amp_nih", help="Input file name (with suffix) for AMPxNIH .assoc")

parser.add_argument("--variant_group", help="Input string with what variant group was looked at")
parser.add_argument("--maf", help="Input string with what MAF was looked at")
parser.add_argument("--group", help="Input string with what groups are being analyzed")

parser.add_argument("--output", "-o", help="Desired output name for files")
args = parser.parse_args()

# Read in your separated .assoc files
print("Reading in your datasets...")

## For CMC 
header_text = ['Gene','RANGE','N_INFORMATIVE','NumVar','NumPolyVar','NonRefSite','Pvalue']
ukb_cases_raw_df = pd.read_csv(args.ukb_cases, delim_whitespace=True, header=0, names=header_text)
amp_nih_raw_df = pd.read_csv(args.amp_nih, delim_whitespace=True, header=0, names=header_text)

# Drop the unncessary columns, leaving just GENE and P-VALUE
ukb_cases_raw_df.drop(columns=['RANGE','N_INFORMATIVE','NumVar','NumPolyVar','NonRefSite'], inplace=True)
amp_nih_raw_df.drop(columns=['RANGE','N_INFORMATIVE','NumVar','NumPolyVar','NonRefSite'], inplace=True)

# Save out the P-value columns to refer to later
data_frames = [ukb_cases_raw_df, amp_nih_raw_df]
original_pval_df = reduce(lambda left,right: pd.merge(left,right,on=['Gene'], how='outer'), data_frames).fillna('NA')
original_pval_df.columns = ['GENE', 'UKB_CASE_PVAL', 'AMP_NIH_PVAL']

# Make a gene list from the merged dataframe
print("Generating gene list...")
final_gene_list = original_pval_df.GENE.unique()

# Now make a total raw df, with all the P-values
total_raw_df = pd.concat(data_frames)

# Loop it using Fisher to combine p-values.
print("Using Fisher to combine p-values...")
results = []
for i in range(len(final_gene_list)):
  this_gene = final_gene_list[i]
  temp_data = total_raw_df[total_raw_df['Gene'] == this_gene]
  combined_gene = stats.combine_pvalues(temp_data['Pvalue'], method='fisher', weights=None)
  test_stat = combined_gene[0]
  p_val = combined_gene[1]
  #print(this_gene, test_stat, p_val)
  results.append([this_gene, test_stat, p_val])
output = pd.DataFrame(results, columns=['GENE', 'TEST_STAT', 'META_PVAL'])

# Sort the output so that the most promising is at the top
print("Sorting output...")
sorted_output = output.sort_values(by=['META_PVAL'], ascending=True)
sorted_output.reset_index(drop=True, inplace=True)
sorted_output.head()

# Now merge with the original P values
final_dataframe = sorted_output.merge(original_pval_df, how='left', on=['GENE'])

# Add columns to help with merging full results later that indicate variant group, MAF, and meta-analysis it's from 
final_dataframe['TEST'] = "CMC"
final_dataframe['VARIANT_GROUP'] = args.variant_group
final_dataframe['MAF'] = args.maf 
final_dataframe['META_ANALYSIS_GROUP'] = args.group

# Now save out the file
output_file = args.output + ".combined_Ps.CMC.tab"
final_dataframe.to_csv(output_file, sep="\t", index=False)
print(f"File has been saved as {output_file}")